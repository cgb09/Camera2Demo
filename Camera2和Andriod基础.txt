### Camera基础:

#### 1，常用API类介绍

```
CameraManager,CameraDevice,CameraCharacteristics,CameraCaptureSession,
StreamConfigurationMap,ImageReader,CaptureRequest,CaptureResult
```

#### 2，起预览流程代码实现

```
CameraManager:检测和连接到相机设备--opencamera(Camerald,StateCallback ,Handler)
CameraDevice.StateCallback--成功调onOpened()，相机不可用调onDisconnected()，失败onError()
CameraDevice--createCaptureSession--Surface(width,height)
onConfigured()--CameraCaptureSession--成功调用这个方法，失败调用onConfigureFailed
CameraCaptureSession.setRepeatingRequest--template_preview预览模板
```

#### 3句句句句·，拍照流程代码实现

```
前面四步都一样，最后调用CameraCaptureSession.capture--template_capture拍照模板
```

#### 4，录像流程代码实现

```
录像流程描述：
录像是按照google官方demo实现的，点击开始录像，会先关闭预览session，然后初始化MediaRecorder，设置音频、视频、输出格式及路径、视频帧率、音频/视频编码格式等参数，再创建录像session，录像session会下发预览Surface和MediaRecorder.Surface两路流，所用模板为template_recorde,调MediaRecorder.start()开始录像。停止录像调MediaRecorder.stop()及reset()，然后重新创建预览session
```

#### 5，如何下发参数，如何获取底层返回参数：

```
  如下发闪光灯的打开和关闭，对焦模式下发及获取AF/AE状态
   CaptureRequest.Builder.set(CaptureRequest.FLASH_MODE,
   								CaptureRequest.FLASH_MODE_TORCH);//闪关灯打开
   CaptureRequest.Builder.set(CaptureRequest.FLASH_MODE, 						 								CaptureRequest.FLASH_MODE_OFF);//闪光灯关闭
   CaptureRequest.Builder.set(CaptureRequest.SENSOR_SENSITIVITY, 100);//感光度
CaptureRequest.Builder.set(CaptureRequest.SENSOR_EXPOSURE_TIME, 100l);//曝光时间
   Integer afState = CaptureResult.get(CaptureResult.CONTROL_AF_STATE);//控制状态
```

#### 6，录像拍照模式切换实现

```
关闭拍照相机id，关闭Session,重新打开录像相机ID
```

#### 7，4:3/16:9分辨率切换实现

```
同时修改切换预览View和预览Surface的宽高
```

#### 8,拍照缩略图生成实现

```
将底层返回数据转换为Bitmap,传入一个小的宽高，然后更新UI
```

#### 9，点击缩略图进入相册实现积极

```
启动打开图库包名的Activity，传递对应的图片Uri
```

#### 10，拍照方向实现

```
通过手机方向传感器获取手机方向，然后根据手机方向设置拍照的CaptureRequest.JPEG_ORIENTATION
```

#### 11，水印功能实现

```
用过canvas画水印数据到底层返回的图片数据，然后保存图片数据
用到了Paint画笔工具类，保存有关如何绘制的样式和颜色信息、几何图形、文本和位图。
用到了Rect类，保存矩形的四个整数坐标。
```

#### 12，图片格式种类介绍：yuv,jpeg,raw,yuv_420_888,nv21,bitmap

参考链接：https://blog.csdn.net/sslinp/article/details/83417711

```
yuv--一种颜色编码格式，Y代表亮度信息（灰度），UV分别代表色彩信息
jpeg--一种图像压缩标准,保存的是被压缩处理过的图片数据
bitmap--图片在内存中的表示方式--位图
raw--未经压缩处理的，sensor只出图像数据
YUV_420_888--android yuv通用格式
NV21是yuv_420的一种，实际项目中，拿到YUV数据，需转换为NV21，然后传给算法处理

jpeg--ImageFormat.JPEG
yuv---ImageFormat.YUV_420_888
raw---ImageFormat.RAW_SENSOR
```

#### 13，Surface，SurfaceTexture,ImageReader.Surface,

#### MediaRecorder.Surface几个Surface的区别

```
   Surface--一个buffer,用来存放图片数据
   SurfaceTexture--用来将图片数据变成纹理供opengl es绘制
   ImageReader.Surface--用来获取拍照数据
   MediaRecorder.Surface--用来获取录像数据
```

#### 14、yuv、jpeg、bitmap的区别

```
yuv--一种颜色编码格式，Y代表亮度信息（灰度），UV分别代表色彩信息
jpeg--一种图像压缩标准,保存的是被压缩处理过的图片数据
bitmap--图片在内存中的表示方式--位图
raw--未经压缩处理的，sensor只出图像数据
```

#### 15.YUV和NV21格式的区别

```
参考链接：https://blog.csdn.net/sslinp/article/details/83417711
YUV_420_888--android yuv通用格式
NV21是yuv_420的一种，实际项目中，拿到YUV数据，需转换为NV21，然后传给算法处理
```

#### 16、JIN简单介绍（提高部分）

```
  java native interface,作用：java 和C互调
```

#### 17，骁龙相机代码走读（提高部分）

  先看xml，启动的哪个Activity,然后找对应的UI，之后看对应的打开相机流程，拍照流程，录像流程 

#### 18，4 : 3、16 : 9预览拉伸变形如何处理

需保证TextureView和预览Surface的宽高比一致

#### 19，自己实现的camera应用中用到几个线程

两个，一个UI线程，一个相机操作线程

#### 20，16 : 9和4 : 3哪个视角更大

 4 : 3视角更大

#### 21，4 : 3和16 : 9的拍照尺寸和预览尺寸

​    4 : 3预览尺寸为1440 : 1080
​    16 : 9预览尺寸为1920 : 1080
拍照尺寸需获取本机支持的所有拍照尺寸,然后选出比例和预览尺寸比例相近且最大的Size作为拍照尺寸

#### 22，回调的线程和创建会话创建请求之类的线程是不是同一线程

是同一线程

#### 23，预览和录像的区别

预览创建session会传两个Surface（也叫两路流）,一个预览Surface，一个拍照Surface,来自ImageReader
录像创建session会传两个Surface（也叫两路流）,一个预览Surface，一个录像Surface,来自MediaRecorder

#### 24.在录像上拍照应该怎么实现

创建录像Session的时候，传三个Surface(也叫三路流)，一个预览Surface，一个录像Surface,来自MediaRecorder，一个拍照Surface,来自ImageReader，
然后录像过程中点击拍照时，调用session的capture方法

#### 25，拍照方向如何设置

CaptureRequest.Builder.set(CaptureRequest.JPEG_ORIENTATION, rotation),
rotation获取方法：利用手机传感器，检测手机目前方向，再结合Sensor目前方向，算出rotation

#### 26，如何获取Jpeg，YUV，Raw照片数据

new ImageReader时传不同的ImageFormat就获取不同的图片数据：
ImageFormat.JPEG,ImageFormat.YUV_420_888,ImageFormat.RAW_SENSOR

#### 27，如何在开启相机的时候判断开启的是前置摄像头

先拿到CameraCharacteristics,然后获取当前相机的LENS_FACING

#### 28.MediaRecorder设置哪些参数

   音频源，视频源，录像格式，录像保存路径，录像宽高，编码格式，帧率 

#### 29,获取帧率范围：

   CameraCharacteristics.CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES   

#### 30.CameraId怎么拿到

cameraManager.getCameraIdList();

#### 31.怎么获取到闪关灯的状态：

   CaptureResult#FLASH_STATE

#### 32，连拍实现API:

  setRepeatingBurst();

#### 参数模板有哪些

```
TEMPLATE_STILL_CAPTURE	template_still_capture
TEMPLATE_PREVIEW		template_preview
TEMPLATE_RECORD			template_record
```

#### 对焦模式下发

```
CaptureRequest.Builder.set(CaptureRequest.CONTROL_AF_TRIGGER, CameraMetadata.CONTROL_AF_TRIGGER_START)
```



### Android基础部分：

#### 1，android四层架构介绍

参考链接：https://www.cnblogs.com/loaderman/p/6430421.html?utm_source=itdadao&utm_medium=referral
(1),Applications（应用层）-各种手机应用，运行在虚拟机上
(2),Application framework（应用框架层）--google提供的开发应用的API框架
(3),libraries（系统运行库层）--系统提供的库，供调用，比如SQLite,Opengl es;Dalvik虚拟机-一个应用一个虚拟机
(4),linux kernel（Linux内核层）--相机驱动，Binder IPC驱动提供进程间通讯

#### 2，Android四大组件介绍：

#####   (1)Activity生命周期介绍:

 参考链接：https://blog.csdn.net/ican87/article/details/21874447

​     七个生命周期方法：onCreate,onStart,onResume,onPause,onStop,onDestroy,onRestart

***按Home键Activity生命周期：***
		    onPause,onStop,然后点击进入：onRestart,onStart,onResume,杀死进程：onDestroy  

***一个MainActivity跳转到另一个SecondActivity:***

​             MainActivity onPause
​             SecondActivity onCreate
​             SecondActivity onStart
​             SecondActivity onResume
​             MainActivity onStop
***从SecondActivity返回到MainActivity:***
​             SecondActivity onPause
​             MainActivity onRestart
​             MainActivity onStart
​             MainActivity onResume
​             SecondActivity onStop
​             SecondActivity onDestroy

activity的启动模式介绍

参考链接：https://blog.csdn.net/elisonx/article/details/80397519

######             1）. 四种启动模式

	标准模式（standard）--默认启动模式-每次启动该Activity，都创建新的Activity
	栈顶复用模式（singleTop）--单顶-栈顶复用栈中已有Activity(onNewIntent调用)，不在栈顶再创建新						  的Activity
	            --应用场景：需重新启动自身，节省内存
	栈内复用模式（singleTask）--单任务-弹出其它，使其处于栈顶
		             --应用场景：保持我们应用开启后仅仅有一个Activity的实例，比如首页，相机主					   Activity
	单例模式（singleInstance	--单例-单独为其创建栈--锁屏键的应用，普通应用不用
	
	启动模式设置方式：
		Manifest.xml中指定：一种静态的指定方法，在Manifest.xml文件里声明Activity的同一时候						指定它的启动模式，这样在代码中跳转时会依照指定的模式来创建Activity。
		Intent中指定：一种动态的启动模式，在new 一个Intent后，通过Intent的addFlags方法去动					态指定一个启动模式。
	   两种启动方式的区别：
	      （1）优先级：Intent中指定优先级更高
	      （2）限定范围：
		     第一种方式无法为Activity直接指定FLAG_ACTIVITY_CLEAR_TOP标识
			 第二种方式无法为Activity指定 singleInstance 单例模式
######             2）. 任务栈

```
	任务栈Task，是一种用来放置Activity实例的容器，他是以栈的形式进行盛放，也就是所谓的先进后出，主要有2个基本操作：压栈和出栈，其所存放的Activity是不支持重新排序的，只能根据压栈和出栈操作更改Activity的顺序。启动一个Application的时候，系统会为它默认创建一个对应的Task，用来放置根Activity。默认启动Activity会放在同一个Task中，新启动的Activity会被压入启动它的那个Activity的栈中，并且显示它。当用户按下回退键时，这个Activity就会被弹出栈，按下Home键回到桌面，再启动另一个应用，这时候之前那个Task就被移到后台，成为后台任务栈，而刚启动的那个Task就被调到前台，成为前台任务栈，手机页面显示的就是前台任务栈中的栈顶元素。
```



######            3）. 四种启动模式的解释

	1.standard
		标准模式：在清单文件中声明 Activity 时，如果不设置Activity的启动模式，系统会 默认 将其设置为standard。每次启动一个标准模式的Activity都会重新创建一个新的实例，不管这个Activity之前是否已经存在实例，一个任务栈中可以有多个实例，每个实例也可以属于不同的任务栈，谁启动了这个Activity，那么这个Activity实例就运行在启动它的那个Activity所在的栈中 。根据上面所说，我们就了解了当用ApplicationContext启动或者在Service中直接调用startActivity启动标准模式Activity时报如下错误的原因了。
	**android.util.AndroidRuntimeException: Calling startActivity from outside of an Activity context requires 
	the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?**
	上面错误的原因就是被启动的Activity是标准模式，而发起启动请求的Context不是ActivityContext，未存在Activity栈，而每个Activity实例启动销毁都需要进栈出栈，用栈来存储Activity的信息，所以非Activity Context需要设置FLAG_ACTIVITY_NEW_TASK属性，启动一个新的Activity栈。
	
	2.singleTop
		栈顶复用模式：在这种模式下，如果新启动的Activity已经位于任务战的栈顶，那么此Activity不会被重新创建，只会重新调用 onNewIntent 方法，这个Activity的onCreate、onStart都不会被系统调用。如果新Activity实例已经存在但不在栈顶，那么重新创建 Activity 并放入栈顶。
	
	3.singleTask
		栈内复用模式：这是一种单实例模式，一个栈中同一个Activity只存在唯一一个实例，无论是否在栈顶，只要存在实例，都不会重新创建，和 singleTop 一样会重新调用 onNewIntent 方法。需要注意的是：如果一个Activity被设置为singleTask模式，那么当栈内已经存在该Activity实例时，再启该Activity，会让该Activity实例之上的Activity被出栈。举个例子：有四个Activity 分别是 A、B、C和D,A是singleTask模式，当先执行A->B->C->D时，A在栈内已存在实例，此时再调用D->A启动A时，会让A实例之上的B、C、D都出栈。一般项目的MainActivity都设置为此模式，方便放回首页和清空中间Activity。
	
	4.singleInstance
		单实例模式：这是一种加强的singleTask模式，它除了具有singleTask模式的所有特性外，还加强了一点，那就是此种模式的Activity只能单独地位于一个任务栈中，不同的应用去打开这个activity 共享公用的同一个activity。他会运行在自己单独，独立的任务栈里面，并且任务栈里面只有他一个实例存在。应用场景：呼叫来电界面。这种模式的使用情况比较罕见，在Launcher中可能使用。或者你确定你需要使Activity只有一个实例。

##### Android四大组件

##### 	（1）Activity(活动):用户操作的可视化界面，用于表现功能（屏幕/窗口）

##### 	（2）Service(服务):后台运行服务，不提供界面呈现

 参考链接：
     	 https://www.runoob.com/android/android-services.html
	 	 https://blog.csdn.net/qq_27061049/article/details/109366345

```
	 
  一个后台运行的组件，执行长时间运行且不需要用户交互的任务,运行在主线程
  Service并不是运行在一个独立的进程当中的，而是依赖于创建服务时所在的应用程序进程。
  当某个应用程序进程被杀掉时，所有依赖于该进程的服务也会停止运行。
  包括两类：
     本地service：就是和当前应用在同一个进程中的service
	 远程service：主要牵扯到不同进程间的service访问--通信方式工具
  服务的两种状态及生命周期：
       startService()启动了服务,执行单一操作，而且不会将结果返回给调用方
	        --onCreate,onStart/onStartCommand,onDestroy 
       bindService()绑定了服务，可以与服务进行交互,多个组件可以同时绑定到该服务,全部取消绑定后，该服务即会被销毁
	        --onCreate,onBind,onUnbind,onRebind,onDestroy 
  两种启动方式：显示启动，隐示启动：		
  如果在同一个应用中，两者都可以用。在不同应用时，只能用隐式启动。
```

##### 	（3）BroadcastReceiver(广播接收者):用于接收广播

  参考链接：https://www.cnblogs.com/ryq2014/p/10184555.html

​					 https://blog.csdn.net/xchaha/article/details/80398620

```
Android组件间的通信方式。 
	  Android广播分为两个方面：广播发送者和广播接收者
      两种注册类型：AndroidManifest.xml静态注册和代码动态注册
	  备注：android 8.0（API26）开始，对清单文件中静态注册广播接收者增加了限制，
	  发送广播时需添加设置：intent.setClassName(this,"com.example.bbreceiver.AReciver");
      根据广播的发送方式，广播分类：普通广播，系统广播，有序广播
      生命周期只有十秒左右，如果在onReceive()内做超过十秒内的事情，就会报ANR(Application No Response)程序无响应的错误信息。它的生命周期为从回调onReceive()方法开始到该方法返回结果后结束
```

##### 	（4）ContentProvider(内容提供者):支持多个应用存储和读取数据，相当于数据库

```
 用来将本应用数据暴露给另一个应用访问的工具
```

#### 3，LinearLayout/RelativeLayout/FrameLayout常用布局，EditText/Button/TextView常用控件：

   LinearLayout--线性布局--水平和垂直方向上的布局
   RelativeLayout--相对布局--两个组件相对位置的布局
   FrameLayout--帧布局--重叠

#### 4,Android数据的四大存储方式：

   （1）SharedPreference存储--相机里面设置参数存储--data/data/
   （2）ContentProvider--相机缩略图-ContentResolver
   （3）文件存储--data/SDCard
   （4）Sqlite数据库存储

#### 5，Handler的用法介绍：

 参考链接：https://www.cnblogs.com/zhoug2020/p/12841311.html

```
	作用：子线程发送消息给主线程或者主线程发送消息给子线程或任意两个线程之间的通信
	原理：
		MessageQueue--消息队列-存放通过 Handler 发送的消息，按照先进先出执行，内部使用的是单链表的结构
		Looper-查找消息队列
		Handler-发送和处理消息
		Message-消息-Handler 发送和处理的消息，由 MessageQueue 管理。
	一个线程里可以有多个Handler，有一个looper，一个MessageQueue
	
在应用启动时。会开一个UI线程，并且启动消息循环，应用不停地从该消息列表中取出、处理消息达到程序运行的效果。Looper负责就是创建一个MessageQueue，然后进入一个无限循环体不断从该MessageQueue中读取消息，而消息的创建者就是一个或多个Handler
```



#### 6,自定义View流程介绍：

```
  分类：1，继承View，包括继承具体View比如Button，TextView
	 2，继承ViewGroup，包括继承具体ViewGroup,比如LinearLayout
  注：
继承View/Button：选择实现onMeasure,必须实现onDraw
继承ViewGroup/LinearLayout:必须实现onMeasure，必须实现onLayout，不用实现必须实现onDraw
	xml中设置的View的宽高，可以通过两种方式拿到：
	（1）onSizeChanged()
	（2）onMeasure()--int width = MeasureSpec.getSize(widthMeasureSpec),
					--int height = MeasureSpec.getSize(heightMeasureSpec),
widthMeasureSpec/heightMeasureSpec里面封装了两个参数,前2个bit用于区分不同的布局模式(mode),后面30个bit存放的是尺寸的数据(size)
```



#### 7，动画介绍

原文链接：https://blog.csdn.net/tongsiw/article/details/61614560

  分类：帧动画，补间动画，属性动画

```
	帧动画（FrameAnimation）：将多张图片组合起来进行播放。跟节点是animation-list（动画列表），里面有一个或者多个item节点组成，oneshot属性表示是否只播放一次，true表示只会播放一次，false表示一直循环播放，内部用item节点声明一个动画帧，android:drawable指定此帧动画所对应的图片资源，android:druation代表此帧持续的时间，整数，单位为毫秒。
	补间动画（TweenAnimation）：补间动画由Animation类来实现具体效果，包括平移（TranslateAnimation）、缩放（ScaleAnimation）、旋转（RotateAnimation）、透明度（AlphaAnimation）四个子类，四种变化，但补间动画只是达到其视觉效果，并不是真正的位置上的变化。
	属性动画（PropertyAnimation）：最强大的动画，弥补了补间动画的缺点，实现位置+视觉的变化。
属性动画包括：ObjectAnimator和ValueAnimator
```

#### 8，事件分发机制介绍

  

```
主要处理对屏幕的点击滑动等事件：
Activity--dispatchTouchExent,onTouchEvent
ViewGroup--dispatchTouchExent,onInterceptTouchEvent,onTouchEvent
View--dispatchTouchEvent,onTouchEvent

1）事件分发的对象是——点击（Touch）事件
2）事件分发的本质——将点击事件（MotionEvent）传递到某个具体的View & 处理的整个过程
	即 事件传递的过程 = 分发过程
3）事件在哪些对象之间进行传递
	Activity、ViewGrouop、View
4）事件分发的顺序
	Activity ——> ViewGroup ——> View
5）事件分发过程由哪些方法协作完成？
	dispatchTouchExent(),onInterceptTouchEvent()和onTouchEvent()
		dispatchTouchExent——分发（传递）点击事件——当点击事件能够传递给当前View时调用
		onTouchEvent——处理点击事件——在dispatchTouchExent()内部调用
		onInterceptTouchEvent——判断是否拦截了某个事件--在只存在于ViewGroup的								dispatchTouchExent内部调用（只存在于ViewGroup，普通的View无该方法）
```

<img src="https://upload-images.jianshu.io/upload_images/944365-eeebede55f55b040.png?imageMogr2/auto-orient/strip|imageView2/2/format/webp" alt="img"  />

#### 9，线程相关知识介绍：线程创建，多线程实现，线程生命周期

  参考链接：
      https://www.runoob.com/note/34745
	  https://www.cnblogs.com/java1024/archive/2019/11/28/11950129.html
	  https://www.cnblogs.com/moongeek/p/7631447.html
	  https://www.cnblogs.com/wugongzi/p/11994825.html
	线程是一个独立的程序单元，可设置优先级
	线程实现方式：
	    一种是继承 Thread 类，另一种就是实现 Runnable 接口
	线程共包括以下 5 种状态:

```
	  1. 新建状态(New): 线程对象被创建后，就进入了新建状态。例如，Thread thread = new Thread()。
      2. 绪状态(Runnable): 也被称为“可执行状态”。线程对象被创建后，其它线程调用了该对象的start()方法，从而来启动该线程。例如，thread.start()。处于就绪状态的线程，随时可能被CPU调度执行。
      3. 运行状态(Running): 线程获取CPU权限进行执行。需要注意的是，线程只能从就绪状态进入到运行状态。
      4. 阻塞状态(Blocked): 阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种： 
        (01) 等待阻塞 -- 通过调用线程的wait()方法，让线程等待某工作的完成。
        (02) 同步阻塞 -- 线程在获取synchronized同步锁失败(因为锁被其它线程所占用)，它会进入同步阻塞状态。
        (03) 其他阻塞 -- 通过调用线程的sleep()或join()或发出了I/O请求时，线程会进入到阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。
      5. 死亡状态(Dead): 线程执行完了或者因异常退出了run()方法，该线程结束生命周期  
            常用方法：
                  join() --线程强制运行
                  sleep()--线程休眠
                  interrupt()--中断线程执行
	    yield()--暂停当前线程，让别的线程先执行
                  wait()--线程等待
                  notify()--唤醒等待线程
      几种锁：
      线程同步：
               synchronized 修饰同步代码块或者同步方法
```

#### 10，常用设计模式介绍

   参考链接：https://www.jianshu.com/p/cb2d09c356ba

​	[23种设计模式则](https://www.jianshu.com/p/a3e844619ed2)	https://www.jianshu.com/p/e6c02a54f447

   单例，工厂，装饰，模板方法，观察者，建造者模式，策略者模式，适配器模式

		单例模式：一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。提供一个全局的访问点。
		建造者模式：将一个复杂的构建与它的表示分离，使得同样的构造过程可以创建不同的展示。
		观察者模式：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都能得到通知并被自动更新。
		策略者模式：在接口定义了一系列的算法，并将每个算法的具体实现封装起来，外部引用的是抽象接口，使得不同算法可以相互替换而不影响客户。
		适配器模式：把一个类的接口转换为客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。
		工厂模式：实例化对象，用工厂方法代替new方法的一种模式。定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。
		装饰者模式：在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。
		
		骁龙相机：SettingsManager getInstance()；
#### 11，内存泄露和内存溢出OOM介绍，四大引用，bitmap大图片加载

  参考链接：https://www.cnblogs.com/andashu/p/6440944.html

```
	内存泄漏：应该被回收的对象因为有其他对象引用，导致不能及时回收造成内存泄漏。（申请使用完的内存没有释放，导致虚拟机不能再次使用该内存，此时这段内存就泄露了，因为申请者不用了，而又不能被虚拟机（系统）分配给别人用）	
	内存溢出OOM：要申请内存大于系统剩余内存，就会报OOM（内存用完了）
```

  四大引用：强引用，软引用，弱引用，虚引用

```
	强引用：只要引用存在，垃圾回收器永远不会回收 	 
例：Object obj = new Object();//可直接通过obj取得对应的对象 如obj.equels(new Object());
而这样 obj对象对后面new Object的一个强引用，只有当obj这个引用被释放之后，对象才会被释放掉，这也是我们经常所用到的编码形式。

	软引用：非必须引用，内存溢出之前进行回收
例：Object obj = new Object();
SoftReference<Object> sf = new SoftReference<Object>(obj);
obj = null;
sf.get();//有时候会返回null
这时候sf是对obj的一个软引用，通过sf.get()方法可以取到这个对象，当然，当这个对象被标记为需要回收的对象时，则返回null；
 软引用主要用户实现类似缓存的功能，在内存足够的情况下直接通过软引用取值，无需从繁忙的真实来源查询数据，提升速度；当内存不足时，自动删除这部分缓存数据，从真正的来源查询这些数据。

	弱引用：第二次垃圾回收时回收
例：Object obj = new Object();
WeakReference<Object> wf = new WeakReference<Object>(obj);
obj = null;
wf.get();//第二次返回null
****  wf.isEnQueued();//返回是否被垃圾回收器标记为即将回收的垃圾  *****
弱引用是在第二次垃圾回收时回收，短时间内通过弱引用取对应的数据，可以取到，当执行过第二次垃圾回收时，将返回null。
弱引用主要用于监控对象是否已经被垃圾回收器标记为即将回收的垃圾，可以通过弱引用的isEnQueued方法返回对象是否被垃圾回收器标记。

	虚引用：垃圾回收时回收，无法通过引用取到对象值
例：Object obj = new Object();
PhantomReference<Object> pf = new PhantomReference<Object>(obj);
obj=null;
pf.get();//永远返回null
pf.isEnQueued();//返回是否从内存中已经删除
虚引用是每次垃圾回收的时候都会被回收，通过虚引用的get方法永远获取到的数据为null，因此也被称为幽灵引用。
虚引用主要用于检测对象是否已经从内存中删除。
```

```
常见内存泄漏主要有以下几类：防止方法：
      1，Handler引起的内存泄漏————Handler用自定义静态内部类方式创建并弱引用Activity，在退出Activity时调用removeCallbacksAndMessages（将Handler声明为静态内部类，就不会持有外部类SecondActivity的引用，其生命周期就和外部类无关，如果Handler里面需要context的话，可以通过弱引用方式引用外部类。）
	  2，单例模式引起的内存泄漏————引用ApplicationContext
	  3，非静态内部类创建静态实例引起的内存泄漏————改为静态内部类或者抽出来写成单例模式
	  4，非静态匿名内部类引起的内存泄漏————改为静态的
	  5，注册/反注册未成对使用引起的内存泄漏————在onCreate或onResume中注册，要记得在响应的onDestroy或onPause方法中反注册
	  6，资源对象没有关闭引起的内存泄漏
	  7，集合对象没有及时清理引起的内存泄漏
防止方法：
```

#### 12，ANR介绍

  参考链接：https://www.jianshu.com/p/388166988cef
  Application no response应用无响应
  原因：
     在主线程进行耗时操作
	 锁竞争--camera里面常见
	 死锁

​	Andriod系统中，ActivityManagerService和WindowManagerService会检测App的响应时间，如果App在特定时间无法响应屏幕触摸或键盘输入事件，或者特定事件没有处理完毕，就会出现ANR。

	以下四个条件都了可以造成ANR发生：
		InputDispatching Timeout：5秒内无法响应屏幕触摸事件或键盘输入事件
	 	BroadcastQueue Timeout ：在执行前台广播（BroadcastReceiver）的onReceive()函数时10秒没有处理完成，后台为60秒。
	 	Service Timeout ：前台服务20秒内，后台服务在200秒内没有执行完毕。
	 	ContentProvider Timeout ：ContentProvider的publish在10s内没进行完。

  防止方法： 
     1，UI线程只做UI相关工作
	 2，耗时操作开辟单独线程

尽量避免在主线程（UI线程）中做耗时操作。

  分析：
      traces.txt文件

#### 13.性能优化

参考链接：https://blog.csdn.net/weixin_33937499/article/details/87957303
          https://www.jianshu.com/p/797395731747
	（1）内存优化
    （2）布局优化
		    使用RelativeLayout代替LinearLayout避免嵌套
			减少View树的层数
			<include>
			<viewStub>
			<merge>

```
优化1.0
	1.如果父控件有颜色，也是自己需要的颜色，那么就不必在子控件加背景颜色
	2.如果每个自控件的颜色不太一样，而且可以完全覆盖父控件，那么就不需要再父控件上加背景颜色
	3.尽量减少不必要的嵌套
	4.能用LinearLayout和FrameLayout，就不要用RelativeLayout，因为RelativeLayout控件相对比较复杂，测绘也想要耗时。
	
优化1.1  针对嵌套布局：
	5.使用include和merge增加复用，减少层级
	6.ViewStub按需加载，更加轻便
	
优化1.2
	7.复杂界面可选择ConstraintLayout，可有效减少层级
	
优化2.0 绘制优化：
	8.onDraw中不要创建新的局部对象
	9.onDraw方法中不要做耗时的任务
	
优化3.0
	10.解决各个情况下的内存泄漏，注意平时代码的规范。
优化4.0	启动速度优化
	11.利用提前展示出来的Window，快速展示出来一个界面，给用户快速反馈的体验；
	12.避免在启动时做密集沉重的初始化（Heavy app initialization）；
	13.避免I/O操作、反序列化、网络操作、布局嵌套等。
```

​    （3）Bitmap优化

#### 14，内存优化

参考链接：https://www.cnblogs.com/renhui/p/11761586.html
定义：优化处理应用程序的内存使用，空间占用。
处理： 内存抖动、内存泄漏、内存溢出，内存占用空间过大Bitmap
Android内存管理机制：
  对进程，对象，变量进行内存分配和回收。
  AppFrameWork和Linux内核负责进程内存管理
  Dalvik虚拟机负责对象和变量内存管理
进程：
  ActivityManagerService 集中管理 所有进程的内存分配
  Application Framework 决定回收的进程类型
  Android中的进程 是托管的；当进程空间紧张时，会 按进程优先级低->>高的顺序 自动回收进程
  Linux 内核真正回收具体进程
对象，变量：
   静态分配--静态变量--静态存储区-常量，静态变量 
   栈式分配--局部变量--栈区
   堆式分配--对象实例--堆区
优化方案：
   Bitmap:分辨率适配和缩放图片
   内存抖动：尽量避免频繁创建大量、临时的小对象
   Bitmap使用结束后需要手动回收，通过调用其recycle方法来进行回收（Bitmap是最容易造成内存泄漏的）
   使用静态方法，静态方法的速度比普通方法快15%（工具类或者常量表可使用静态方法）
   减少成员变量，使用局部变量替换掉只使用过一次的成员变量
   尽量不要使用枚举类和迭代器（枚举类占用内存远大于常量表）
   对于部分需要回收的类，使用后一定要关闭、回收或者解除注册，例如Cursor、Receiver、Sensor、File、IO等对象
   避免使用IOC框架，大量使用反射依然会造成性能下降，内存消耗较大
   使用RenderScript、OpenGL来进行非常复杂的绘图操作
   尽量使用Holder对视图进行缓存，而不是重复执行inflate方法解析视图
   除非必要尽量少使用Activity的context，实用Application的Context替代，避免Activity被其他类持有造成无法回收从而导致内存泄漏
   静态类中应该避免持有Activity的context，导致context无法回收
   Task及其子类（TimerTask，AsyncTask等）无论是否用于循环，都需要在执行结束后或者Activity生命周期结束后被Cancle掉,否则会造成内存泄漏
   动画在Activity生命周期结束后也需要cancle
   WebViwe在加载网页后会长期占有内存，需要在Activity生命周期结束后调用其destroy方法来进行销毁
   线程在执行结束后需要对其进行关闭，且线程数量不易过多，必要时通过线程池来管理线程
   通过Activity的Recreate方法来重启Activity时应该先移除之前的Fragment避免创建重复的Fragment导致内存泄漏
   使用较少的工具类尽量使用单例模式,少用static类,以减少不必要的类加载
   在AndroidMainifest中为主Activity加上clearTaskOnLaunch标签,这样一旦返回到主Activity时就销毁其他所有Activity,避免内存泄漏
   对于一些不必要长期持有的类,我们可以通过弱引用和软引用来减少内存占用

#### 15，跨进程通信有四种方式，分别对应着四大组件：

​     Activity：指定的是要访问的Activity所对应的Action（一个字符串）。
​	           有些Activity还需要指定一个Uri（通过 Intent构造方法的第2个参数指定）。
​     Broadcast：广播是一种被动跨进程通讯的方式。通过Intent对象可以发送需要广播的数据。
​     Service：通过AIDL实现，AIDL的全称是Android Interface Definition Language。
​     ContentProvider：Android应用程序可以使用文件或SqlLite数据库来存储数据。
​	 Content Provider提供了一种在多个应用程序之间数据共享的方式（跨进程共享数据）。
​	 应用程序可以利用Content Provider完成：查询数据，修改数据，添加数据，删除数据
​     Content Provider存在的目的向其他应用程序共享数据和允许其他应用程序对数据进行增、删、改操作。

#### 16，Surface,View，SurfaceView，Textureview，SurfacaeTexture，GLsurfaceview三者的区别--opengl es

​        Surface,一个window都有自己的一个surface，
​		     该对象持有一群像素（pixels），这些像素是要被组合到一起显示到屏幕上的
​        View,显示视图，View必须附着在Window，
​		   内置画布，处理事件，UI线程更新，速度较慢
​	    SurfaceView，继承自View,不能设置透明度,平移动画，
​		             开辟新窗口window，拥有独立的Surface,
​             		双缓冲机制,允许子线程更新，刷新速度快，它在需要渲染时，内容会变得完全透明，view部分只是一个透明的占位符
​        GLSurfaceView，拥有 SurfaceView 全部特性，封装EGL环境，
​		            专门用于opengl渲染，具有独立的渲染线程，它在需要渲染时，内容会变得完全透明，view部分只是一个透明的占位符
​	    SurfacaeTexture: 对图像流的处理并不直接显示，而是转为 GL 外部纹理，
​        TextrueView:支持View属性设置，比如透明度，平移，设置，它在需要渲染时，内容会变得完全透明，view部分只是一个透明的占位符
​	备注：
​	    android graphics主要干了2件事：
​         一个是画图，一个是合成显示。
​         1.画图
​            两种方式将图像绘制在屏幕上， Canvas 和 opengl
​            canvas：用于绘制 原生和 自定义View
​            通过OpenglRender，将canvas画的图，转换为opengl 运算，再通过surface进行渲染，通过GPU去显示
​            opengl ：直接通过surface进行渲染，通过GPU去显示
​            无论开发者使用什么渲染 API，一切内容都会渲染到“Surface”
​         2.显示
​            window
​            Window有三种类型，分别是ApplicationWindow，ChildrenWindow 和SystemWindow 
​            Application Window 对应一个 Acitivity
​            Children Window不能单独存在，需要依附在特定的父 Window 中，比如常见的一些 Dialog 就是一个子 Window
​            System Window 需要声明权限才能创建的Window，比如 Toast 和系统状态栏都是系统 Window。悬浮框就是通过这个属性创建的
​            另外Window 是分层的，每个 Window 都有对应的 z-ordered，层级大的会覆盖在层级小的 Window 上面。
​            Application Window层级范围是 1~99
​            Children Window 层级范围是 1000~1999
​            System Window 层级范围是 2000~2999
​            View Hierarch
​            用来组织一个window上的所有view的显示，一个window只有一个View Hierarch
​            WindowManager
​            管理系统中的所有Window,一块块的Window,在WindowManager的管理下有序的排列在屏幕上，Android 才得以呈现出多姿多彩的界面 。
​            WindowManager会监督生命周期、输入和聚焦事件、屏幕方向、转换、动画、位置、变形、Z-Order 以及窗口的其他许多事件
​            SurfaceFlinger
​            管理消耗当前可见的surface，所有被渲染的可见 Surface 都被 SurfaceFlinger，通过window manager 提供的信息合成到显示部分

#### 17,JNI编程--java native interface，java和c互调，一般用来集成三方算法库

#### 18,MVP/MVC/MVVM介绍

​    



MediaRecorder状态：    
             录音录像时需要严格遵守状态图说明中的函数调用先后顺序， 
             在不同的状态调用不同的函数，否则会出现异常。
Initial：初始状态，
         当使用new()方法创建一个MediaRecorder对象或者调用了reset()方法时，
         该MediaRecorder对象处于Initial状态。在设定视频源或者音频源之后将转换为Initialized状态。
         另外，在除Released状态外的其它状态通过调用reset()方法都可以使MediaRecorder进入该状态。
Initialized：已初始化状态，
             可以通过在Initial状态调用setAudioSource()或setVideoSource()方法进入该状态。
			 在这个状态可以通过setOutputFormat()方法设置输出格式，
			 此时MediaRecorder转换为DataSourceConfigured状态。另外，通过reset()方法进入Initial状态。
DataSourceConfigured：数据源配置状态，
          这期间可以设定编码方式、输出文件、屏幕旋转、预览显示等等。
		  可以在Initialized状态通过setOutputFormat()方法进入该状态。
		  另外，可以通过reset()方法回到Initial状态，或者通过prepare()方法到达Prepared状态。
Prepared：就绪状态，
        在DataSourceConfigured状态通过prepare()方法进入该状态。
		在这个状态可以通过start()进入录制状态。
		另外，可以通过reset()方法回到Initialized状态。
Recording：录制状态，
          可以在Prepared状态通过调用start()方法进入该状态。
		  另外，它可以通过stop()方法或reset()方法回到Initial状态。
Released：释放状态
        （官方文档给出的词叫做Idle state 空闲状态），
		可以通过在Initial状态调用release()方法来进入这个状态，
		这时将会释放所有和MediaRecorder对象绑定的资源。
Error：错误状态，
       当错误发生的时候进入这个状态，它可以通过reset()方法进入Initial状态。
	   
1,opengl es
2,SurfaceView，Textureview，GLsurfaceview三者的区别
3,Context
4,Application 
5,jni-c、c++-java native interface 
6，MediaRecorder状态